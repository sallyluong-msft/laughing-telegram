// Generated by Copilot
import { describe, it, expect } from 'vitest';
import request from 'supertest';
import express from 'express';
import orderDetailDeliveryRouter from './orderDetailDelivery';

const app = express();
app.use(express.json());
app.use('/order-detail-deliveries', orderDetailDeliveryRouter);

describe('OrderDetailDelivery API', () => {
	it('should create a new order detail delivery', async () => {
		const newOrderDetailDelivery = { 
			deliveryId: 1, 
			orderId: 1, 
			orderDetailId: 1, 
			name: 'Order Detail Delivery 1', 
			description: 'Test order detail delivery' 
		};
		const response = await request(app).post('/order-detail-deliveries').send(newOrderDetailDelivery);
		expect(response.status).toBe(201);
		expect(response.body).toEqual(newOrderDetailDelivery);
	});

	it('should get all order detail deliveries', async () => {
		const response = await request(app).get('/order-detail-deliveries');
		expect(response.status).toBe(200);
		expect(response.body).toEqual([{ 
			deliveryId: 1, 
			orderId: 1, 
			orderDetailId: 1, 
			name: 'Order Detail Delivery 1', 
			description: 'Test order detail delivery' 
		}]);
	});

	it('should get an order detail delivery by ID', async () => {
		const response = await request(app).get('/order-detail-deliveries/1');
		expect(response.status).toBe(200);
		expect(response.body).toEqual({ 
			deliveryId: 1, 
			orderId: 1, 
			orderDetailId: 1, 
			name: 'Order Detail Delivery 1', 
			description: 'Test order detail delivery' 
		});
	});

	it('should update an order detail delivery by ID', async () => {
		const updatedOrderDetailDelivery = { 
			deliveryId: 1, 
			orderId: 1, 
			orderDetailId: 1, 
			name: 'Updated Order Detail Delivery 1', 
			description: 'Updated order detail delivery' 
		};
		const response = await request(app).put('/order-detail-deliveries/1').send(updatedOrderDetailDelivery);
		expect(response.status).toBe(200);
		expect(response.body).toEqual(updatedOrderDetailDelivery);
	});

	it('should delete an order detail delivery by ID', async () => {
		const response = await request(app).delete('/order-detail-deliveries/1');
		expect(response.status).toBe(204);
	});

	it('should return 404 for non-existing order detail delivery', async () => {
		const response = await request(app).get('/order-detail-deliveries/999');
		expect(response.status).toBe(404);
	});
});