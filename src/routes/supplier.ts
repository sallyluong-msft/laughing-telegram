// Generated by Copilot
import express from 'express';
import { Supplier } from '../models/supplier';

const router = express.Router();

let suppliers: Supplier[] = [];

/**
 * @swagger
 * components:
 *   schemas:
 *     Supplier:
 *       type: object
 *       required:
 *         - supplierId
 *         - name
 *       properties:
 *         supplierId:
 *           type: integer
 *           description: The auto-generated ID of the supplier
 *         name:
 *           type: string
 *           description: The name of the supplier
 *         description:
 *           type: string
 *           description: The supplier description
 *       example:
 *         supplierId: 1
 *         name: ABC Suppliers
 *         description: A reliable supplier of quality products
 */

/**
 * @swagger
 * tags:
 *   name: Suppliers
 *   description: The suppliers managing API
 */

/**
 * @swagger
 * /api/suppliers:
 *   post:
 *     summary: Create a new supplier
 *     tags: [Suppliers]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Supplier'
 *     responses:
 *       201:
 *         description: The supplier was successfully created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Supplier'
 *       500:
 *         description: Server error
 */
router.post('/', (req, res) => {
  const newSupplier: Supplier = req.body;
  suppliers.push(newSupplier);
  res.status(201).json(newSupplier);
});

/**
 * @swagger
 * /api/suppliers:
 *   get:
 *     summary: Returns the list of all suppliers
 *     tags: [Suppliers]
 *     responses:
 *       200:
 *         description: The list of suppliers
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Supplier'
 */
router.get('/', (req, res) => {
  res.json(suppliers);
});

/**
 * @swagger
 * /api/suppliers/{id}:
 *   get:
 *     summary: Get a supplier by ID
 *     tags: [Suppliers]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: The supplier ID
 *     responses:
 *       200:
 *         description: The supplier description by ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Supplier'
 *       404:
 *         description: The supplier was not found
 */
router.get('/:id', (req, res) => {
  const supplier = suppliers.find(s => s.supplierId === parseInt(req.params.id));
  if (supplier) {
    res.json(supplier);
  } else {
    res.status(404).send('Supplier not found');
  }
});

/**
 * @swagger
 * /api/suppliers/{id}:
 *   put:
 *     summary: Update a supplier by ID
 *     tags: [Suppliers]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: The supplier ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Supplier'
 *     responses:
 *       200:
 *         description: The supplier was updated
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Supplier'
 *       404:
 *         description: The supplier was not found
 *       500:
 *         description: Server error
 */
router.put('/:id', (req, res) => {
  const index = suppliers.findIndex(s => s.supplierId === parseInt(req.params.id));
  if (index !== -1) {
    suppliers[index] = req.body;
    res.json(suppliers[index]);
  } else {
    res.status(404).send('Supplier not found');
  }
});

/**
 * @swagger
 * /api/suppliers/{id}:
 *   delete:
 *     summary: Delete a supplier by ID
 *     tags: [Suppliers]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: The supplier ID
 *     responses:
 *       204:
 *         description: The supplier was deleted
 *       404:
 *         description: The supplier was not found
 */
router.delete('/:id', (req, res) => {
  const index = suppliers.findIndex(s => s.supplierId === parseInt(req.params.id));
  if (index !== -1) {
    suppliers.splice(index, 1);
    res.status(204).send();
  } else {
    res.status(404).send('Supplier not found');
  }
});

export default router;
