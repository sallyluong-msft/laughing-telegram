// Generated by Copilot
import { describe, it, expect } from 'vitest';
import request from 'supertest';
import express from 'express';
import productRouter from './product';

const app = express();
app.use(express.json());
app.use('/products', productRouter);

describe('Product API', () => {
	it('should create a new product', async () => {
		const newProduct = { productId: 1, supplierId: 1, price: 29.99, name: 'Product 1', description: 'Test product' };
		const response = await request(app).post('/products').send(newProduct);
		expect(response.status).toBe(201);
		expect(response.body).toEqual(newProduct);
	});

	it('should get all products', async () => {
		const response = await request(app).get('/products');
		expect(response.status).toBe(200);
		expect(response.body).toEqual([{ productId: 1, supplierId: 1, price: 29.99, name: 'Product 1', description: 'Test product' }]);
	});

	it('should get a product by ID', async () => {
		const response = await request(app).get('/products/1');
		expect(response.status).toBe(200);
		expect(response.body).toEqual({ productId: 1, supplierId: 1, price: 29.99, name: 'Product 1', description: 'Test product' });
	});

	it('should update a product by ID', async () => {
		const updatedProduct = { productId: 1, supplierId: 1, price: 39.99, name: 'Updated Product 1', description: 'Updated product' };
		const response = await request(app).put('/products/1').send(updatedProduct);
		expect(response.status).toBe(200);
		expect(response.body).toEqual(updatedProduct);
	});

	it('should delete a product by ID', async () => {
		const response = await request(app).delete('/products/1');
		expect(response.status).toBe(204);
	});

	it('should return 404 for non-existing product', async () => {
		const response = await request(app).get('/products/999');
		expect(response.status).toBe(404);
	});
});